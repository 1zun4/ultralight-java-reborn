package net.janrupf.ujr.api.listener;

/**
 * Interface for load related events.
 * <p>
 * This API is slightly different from the C++ API. Each method is missing the View that fired the event.
 * In order to avoid memory safety issues, this parameter is omitted. If you need to know which view fired the event,
 * attach different listeners to different views.
 */
public interface UltralightLoadListener {
    /**
     * Called when the page begins loading a new URL into a frame.
     *
     * @param frameId     a unique ID for the frame
     * @param isMainFrame whether this is the main frame
     * @param url         the URL for the load
     */
    default void onBeginLoading(long frameId, boolean isMainFrame, String url) {
    }

    /**
     * Called when the page finishes loading a URL into a frame.
     *
     * @param frameId     a unique ID for the frame
     * @param isMainFrame whether this is the main frame
     * @param url         the URL for the load
     */
    default void onFinishLoading(long frameId, boolean isMainFrame, String url) {
    }

    /**
     * Called when an error occurs while loading a URL into a frame.
     *
     * @param frameId     a unique ID for the frame
     * @param isMainFrame whether this is the main frame
     * @param url         the URL for the load
     * @param description a human-readable description of the error
     * @param errorDomain the name of the module that triggered the error
     * @param errorCode   internal error code generated by the module
     */
    default void onFailLoading(
            long frameId,
            boolean isMainFrame,
            String url,
            String description,
            String errorDomain,
            int errorCode
    ) {
    }

    /**
     * Called when the JavaScript window object is reset for a new page load.
     * <p>
     * This is called before any scripts are executed on the page and is the earliest time to setup
     * any initial JavaScript state or bindings.
     * <p>
     * The document is not guaranteed to be loaded/parsed at this point. If you need to make any
     * JavaScript calls that are dependent on DOM elements or scripts on the page, use OnDOMReady
     * instead.
     * <p>
     * The window object is lazily initialized (this will not be called on pages with no scripts).
     *
     * @param frameId     a unique ID for the frame
     * @param isMainFrame whether this is the main frame
     * @param url         the URL for the load
     */
    default void onWindowObjectReady(long frameId, boolean isMainFrame, String url) {
    }

    /**
     * Called when all JavaScript has been parsed and the document is ready.
     * <p>
     * This is the best time to make any JavaScript calls that are dependent on DOM elements or
     * scripts on the page.
     *
     * @param frameId     a unique ID for the frame
     * @param isMainFrame whether this is the main frame
     * @param url         the URL for the load
     */
    default void onDOMReady(long frameId, boolean isMainFrame, String url) {
    }

    /**
     * Called when the session history (back/forward state) is modified.
     */
    default void onUpdateHistory() {
    }
}
