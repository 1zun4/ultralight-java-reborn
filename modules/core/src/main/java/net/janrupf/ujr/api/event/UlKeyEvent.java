package net.janrupf.ujr.api.event;

import net.janrupf.ujr.core.platform.abstraction.UlKeyboard;
import net.janrupf.ujr.core.util.ApiProvider;

import java.util.EnumSet;

public class UlKeyEvent {
    private static final ApiProvider<UlKeyboard> UL_KEYBOARD = new ApiProvider<>(UlKeyboard.class);

    /**
     * The type of this key event.
     */
    public UlKeyEventType type;

    /**
     * The current state of the keyboard.
     */
    public EnumSet<UlKeyEventModifiers> modifiers;

    /**
     * The virtual key-code associated with this keyboard event. This is either directly from the
     * event (ie, WPARAM on Windows) or via a mapping function. You can see a full list of the
     * possible virtual key-codes in KeyCodes.h
     */
    public int virtualKeyCode;

    /**
     * The actual key-code generated by the platform. The DOM spec primarily uses Windows-equivalent
     * codes (hence virtualKeyCode above) but it helps to also specify the platform-specific
     * key-code as well.
     */
    public int nativeKeyCode;

    /**
     * This is a string identifying the key that was pressed. This can be generated from the
     * virtual_key_code via the GetKeyIdentifierFromVirtualKeyCode() utility function. You can find
     * the full list of key identifiers at:
     * https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/keyset.html
     */
    public String keyIdentifier;

    /**
     * The actual text generated by this keyboard event. This is usually only a single character.
     */
    public String text;

    /**
     * The text generated by this keyboard event before all modifiers except shift are applied. This
     * is used internally for working out shortcut keys. This is usually only a single character.
     */
    public String unmodifiedText;

    /**
     * Whether this is a keypad event.
     */
    public boolean isKeypad;

    /**
     * Whether this was generated as the result of an auto-repeat (eg, holding down a key).
     */
    public boolean isAutoRepeat;

    /**
     * Whether the pressed key is a "system key". This is a Windows-only concept and should
     * be "false" for all non-Windows platforms. For more information, see the following link:
     * http://msdn.microsoft.com/en-us/library/ms646286(VS.85).aspx
     */
    public boolean isSystemKey;

    /**
     * Utility function for generating a key identifier string from a virtual
     * key-code.
     *
     * @param virtualKeyCode the virtual key-code to generate the key identifier from
     * @return the key identifier, or null, if none or the API is not available
     */
    public static String keyIdentifierFromVirtualKeyCode(int virtualKeyCode) {
        UlKeyboard keyboard = UL_KEYBOARD.tryProvide();

        if (keyboard == null) {
            return null;
        }

        return keyboard.keyIdentifierFromVirtualKeyCode(virtualKeyCode);
    }

    /**
     * Utility function for generating a key string from a virtual key-code.
     * <p>
     * This function assumes a US layout.
     *
     * @param virtualKeyCode the virtual key-code to generate the key from
     * @param shift          whether the shift key is pressed
     * @return the key, or null, if none or the API is not available
     */
    public static String keyFromVirtualKeyCode(int virtualKeyCode, boolean shift) {
        UlKeyboard keyboard = UL_KEYBOARD.tryProvide();

        if (keyboard == null) {
            return null;
        }

        return keyboard.keyFromVirtualKeyCode(virtualKeyCode, shift);
    }
}
